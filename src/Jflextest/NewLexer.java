/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package Jflextest;
import static Jflextest.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>NewLexer.flex</tt>
 */
class NewLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\21\1\21\1\21\1\21\22\0\1\1\7\0\1\6\1\10"+
    "\3\0\1\11\1\4\1\0\1\7\1\16\1\17\1\17\1\20\1\15"+
    "\4\7\6\0\1\14\32\2\1\12\1\0\1\13\1\0\1\5\1\0"+
    "\32\3\12\0\1\21\u1fa2\0\1\21\1\21\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\7\1\12\0\1\3\20\0\1\4"+
    "\25\0\1\4\25\0\1\4\3\0\1\5\20\0\1\6"+
    "\6\0\1\5\1\7\1\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\22\0\22\0\44\0\66\0\110\0\132\0\154"+
    "\0\176\0\220\0\66\0\242\0\264\0\306\0\330\0\352"+
    "\0\374\0\u010e\0\u0120\0\u0132\0\u0144\0\u0156\0\u0168\0\u017a"+
    "\0\u018c\0\u019e\0\u01b0\0\u01c2\0\u01d4\0\u01e6\0\u01f8\0\u020a"+
    "\0\u021c\0\u022e\0\u0240\0\u0252\0\u0264\0\u0276\0\u0288\0\u029a"+
    "\0\u02ac\0\u02be\0\u02d0\0\u02e2\0\u02f4\0\u0306\0\u0318\0\u032a"+
    "\0\u033c\0\u034e\0\u0360\0\u0372\0\u0384\0\u0396\0\u03a8\0\u03ba"+
    "\0\u03cc\0\u03de\0\u03f0\0\u0402\0\u0414\0\u0426\0\u0438\0\u044a"+
    "\0\u045c\0\u046e\0\u0480\0\u0492\0\u04a4\0\u04b6\0\u04c8\0\u04da"+
    "\0\u04ec\0\u04fe\0\u0510\0\u0522\0\u0534\0\u0546\0\u0558\0\u056a"+
    "\0\u057c\0\u04fe\0\u058e\0\u05a0\0\u05b2\0\u05c4\0\u05d6\0\u05e8"+
    "\0\u05fa\0\u060c\0\u061e\0\u0630\0\u0642\0\u0654\0\u0666\0\u0678"+
    "\0\u068a\0\u069c\0\u06ae\0\u06c0\0\u06d2\0\u06e4\0\22\0\u06f6"+
    "\0\u0708\0\u071a\0\u05c4\0\u072c\0\u073e\0\22\0\22\0\22";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\2\1\6\1\7\2\2"+
    "\1\10\2\2\1\11\2\7\1\12\25\0\1\13\1\14"+
    "\2\13\1\0\1\13\1\0\1\13\2\0\1\15\4\13"+
    "\3\0\4\13\1\0\1\13\1\0\1\13\2\0\1\15"+
    "\4\13\10\0\1\16\5\0\4\16\10\0\1\17\5\0"+
    "\4\17\10\0\1\20\5\0\4\20\10\0\1\17\5\0"+
    "\1\21\1\22\2\21\10\0\1\23\5\0\4\23\3\0"+
    "\1\13\1\14\1\13\1\24\1\0\1\13\1\0\1\13"+
    "\2\0\1\15\4\13\3\0\2\25\25\0\1\26\5\0"+
    "\4\26\10\0\1\27\1\0\1\30\3\0\4\27\10\0"+
    "\1\31\5\0\4\31\10\0\1\32\1\0\1\30\3\0"+
    "\4\32\10\0\1\27\1\0\1\30\1\0\1\33\1\0"+
    "\4\27\10\0\1\34\1\0\1\30\3\0\4\34\3\0"+
    "\1\35\1\36\1\13\1\24\1\0\1\13\1\0\1\13"+
    "\2\0\1\15\4\13\3\0\4\25\1\0\1\25\1\0"+
    "\1\25\3\0\4\25\11\0\1\37\22\0\1\40\17\0"+
    "\1\41\5\0\4\41\10\0\1\42\5\0\4\42\10\0"+
    "\1\43\1\0\1\40\3\0\4\43\10\0\1\44\5\0"+
    "\4\44\10\0\1\45\1\0\1\40\3\0\4\45\3\0"+
    "\1\13\1\46\2\13\1\0\1\13\1\0\1\13\2\0"+
    "\1\15\4\13\3\0\1\13\1\47\1\13\1\24\1\0"+
    "\1\13\1\0\1\13\2\0\1\15\4\13\12\0\1\50"+
    "\17\0\1\51\5\0\4\51\10\0\1\52\5\0\4\52"+
    "\14\0\1\27\15\0\1\53\5\0\4\53\10\0\1\43"+
    "\5\0\4\43\10\0\1\54\5\0\4\54\3\0\1\13"+
    "\1\46\1\13\1\55\1\0\1\13\1\0\1\13\2\0"+
    "\1\15\4\13\3\0\1\13\1\56\1\13\1\24\1\0"+
    "\1\13\1\0\1\13\2\0\1\15\4\13\10\0\1\57"+
    "\5\0\4\57\10\0\1\60\5\0\4\60\12\0\1\61"+
    "\17\0\1\62\5\0\4\62\10\0\1\63\5\0\4\63"+
    "\3\0\1\64\1\65\1\13\1\55\1\0\1\13\1\0"+
    "\1\13\2\0\1\15\4\13\3\0\1\13\1\66\1\13"+
    "\1\24\1\0\1\13\1\0\1\13\2\0\1\15\4\13"+
    "\10\0\1\67\5\0\4\67\12\0\1\70\17\0\1\71"+
    "\5\0\4\71\10\0\1\72\5\0\4\72\10\0\1\73"+
    "\5\0\4\73\3\0\1\13\1\74\2\13\1\0\1\13"+
    "\1\0\1\13\2\0\1\15\4\13\3\0\1\13\1\75"+
    "\1\13\1\55\1\0\1\13\1\0\1\13\2\0\1\15"+
    "\4\13\3\0\3\13\1\24\1\0\1\13\1\0\1\13"+
    "\2\0\1\15\4\13\12\0\1\76\17\0\1\77\5\0"+
    "\4\77\10\0\1\100\5\0\4\100\10\0\1\101\5\0"+
    "\4\101\10\0\1\102\5\0\4\102\3\0\1\13\1\74"+
    "\1\13\1\103\1\0\1\13\1\0\1\13\2\0\1\15"+
    "\4\13\3\0\1\13\1\104\1\13\1\55\1\0\1\13"+
    "\1\0\1\13\2\0\1\15\4\13\10\0\1\105\5\0"+
    "\4\105\10\0\1\106\5\0\4\106\12\0\1\107\17\0"+
    "\1\110\5\0\4\110\10\0\1\111\5\0\4\111\3\0"+
    "\1\112\1\113\1\13\1\103\1\0\1\13\1\0\1\13"+
    "\2\0\1\15\4\13\3\0\1\13\1\114\1\13\1\55"+
    "\1\0\1\13\1\0\1\13\2\0\1\15\4\13\10\0"+
    "\1\115\5\0\4\115\12\0\1\116\17\0\1\117\5\0"+
    "\4\117\10\0\1\120\5\0\4\120\10\0\1\121\5\0"+
    "\4\121\3\0\1\13\1\122\2\13\1\0\1\13\1\0"+
    "\1\13\2\0\1\15\4\13\3\0\1\13\1\123\1\13"+
    "\1\103\1\0\1\13\1\0\1\13\2\0\1\15\4\13"+
    "\3\0\3\13\1\55\1\0\1\13\1\0\1\13\2\0"+
    "\1\15\4\13\12\0\1\124\17\0\1\125\5\0\4\125"+
    "\10\0\1\126\5\0\4\126\10\0\1\127\5\0\4\127"+
    "\10\0\1\130\5\0\4\130\3\0\1\13\1\131\1\13"+
    "\1\103\1\0\1\13\1\0\1\13\2\0\1\15\4\13"+
    "\10\0\1\132\5\0\4\132\10\0\1\133\5\0\4\133"+
    "\12\0\1\134\17\0\1\135\5\0\4\135\10\0\1\136"+
    "\5\0\4\136\3\0\1\13\1\137\1\13\1\103\1\0"+
    "\1\13\1\0\1\13\2\0\1\15\4\13\10\0\1\140"+
    "\5\0\4\140\12\0\1\141\17\0\1\142\5\0\4\142"+
    "\10\0\1\143\5\0\4\143\10\0\1\144\5\0\4\144"+
    "\3\0\3\13\1\103\1\0\1\13\1\0\1\13\2\0"+
    "\1\15\4\13\12\0\1\145\17\0\1\146\5\0\4\146"+
    "\10\0\1\147\5\0\4\147\10\0\1\150\5\0\4\150"+
    "\10\0\1\151\5\0\4\151\10\0\1\152\5\0\4\152"+
    "\10\0\1\153\5\0\4\153\10\0\1\154\5\0\4\154"+
    "\10\0\1\155\5\0\4\155\10\0\1\156\5\0\4\156"+
    "\10\0\1\157\5\0\4\157\10\0\1\160\5\0\4\160"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1872];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\7\1\12\0\1\1\20\0\1\1\25\0"+
    "\1\1\25\0\1\1\3\0\1\1\20\0\1\11\6\0"+
    "\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NewLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  NewLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 74) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { lexeme=yytext(); return ERROR;
          }
        case 9: break;
        case 2: 
          { lexeme=yytext(); return White;
          }
        case 10: break;
        case 3: 
          { lexeme=yytext(); return Email;
          }
        case 11: break;
        case 4: 
          { lexeme=yytext(); return Nombre;
          }
        case 12: break;
        case 5: 
          { lexeme=yytext(); return Tellocal;
          }
        case 13: break;
        case 6: 
          { lexeme=yytext(); return Celular;
          }
        case 14: break;
        case 7: 
          { lexeme=yytext(); return Mastercard;
          }
        case 15: break;
        case 8: 
          { lexeme=yytext(); return Visa;
          }
        case 16: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
